@model Frontend_Sistema_Votaciones.Models.RolesViewModel
@using Newtonsoft.Json;
@{
    var Rol_Id = Model != null ? Model.Rol_Id : 0;
    var roles = ViewBag.Roles;
    var pantallas = ViewBag.Pantallas;
    var esquemas = ViewBag.Esquemas;
    var pantallasPorRoles = ViewBag.PantallasPorRoles;
    ViewData["Title"] = "Roles";
    var abrirModal = TempData["AbrirModal"];
    string serializedItem = (string)TempData["Item"];

    RolesViewModel rol = null;
    if (!String.IsNullOrEmpty(serializedItem))
    {
        rol = JsonConvert.DeserializeObject<RolesViewModel>(serializedItem);
    }
}

<header class="w-100 d-flex justify-content-between align-items-center p-2" style="background: rgb(255,255,255); min-height: 12vh;">
    <h2>Pantallas por rol</h2>
    <button href="~/" class="btn btn-primary" style="max-height: 40px; max-width: 150px; min-width: 100px">
        <i class="bi bi-house-door-fill"></i>
        Inicio
    </button>
</header>
<div class="card m-2 mt-4 p-3" style="overflow-x: auto">
    <div class="d-flex justify-content-center align-items-center flex-column">
        <div style="min-width: 280px">
            <label style="color: #3dbdd9">Rol</label>
            <select asp-for="Rol_Id" class="form-select" style="max-width: 280px;">
                <option>--Rol--</option>
                @if (roles != null)
                {
                    foreach (var item in roles)
                    {
                        if (item.Rol_Id == Rol_Id)
                        {
                            <option value="@item.Rol_Id" selected>@item.Rol_Descripcion</option>
                        }
                        else
                        {
                            <option value="@item.Rol_Id">@item.Rol_Descripcion</option>
                        }
                    }
                }
            </select>
        </div>
        <div id="ParoTreeView">
            <ul>
                <li id="Pantallas" data-jstree='{"opened":true,"icon":"/lib/jstree/window-fullscreen.svg"}'>
                    <span>Pantallas</span>
                    <ul>
                        @if (esquemas != null && pantallas != null)
                        {
                            foreach (var esquema in esquemas)
                            {
                                <li id="@esquema" data-jstree='{"icon":"/lib/jstree/card-list.svg"}'>
                                    <label>@esquema</label>
                                    <ul>
                                        @foreach (var pantalla in pantallas)
                                        {
                                            if (pantalla.Pant_Esquema == esquema)
                                            {
                                                <li id="@pantalla.Pant_Id" data-jstree='{"icon":"/lib/jstree/circle.svg"}'>@pantalla.Pant_Descripcion</li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<script>
    const pantallasPorRolesJSON = JSON.parse("@pantallasPorRoles");
    console.log(pantallasPorRolesJSON);
    $('#ParoTreeView').jstree({
        "core": {
            "themes": {
                "variant": "large"
            }
        },
        "checkbox": {
            "keep_selected_style": false
        },
        "plugins": ["checkbox"]
    }).on('changed.jstree', function (e, data) {
        console.log(data.node.id, "data.node.id")
        if (/^\d+$/.test(ddlRoles.value)) {
            if (/^\d+$/.test(data.node.id)) {
                let method = "DELETE";
                if (data.action === "select_node") {
                    method = "GET";
                }
                $.ajax({
                    url: `/Roles/${method === "GET" ? "Create" : "Delete"}PantallasPorRoles?Rol_Id=${ddlRoles.value}&Pant_Id=${data.node.id}`,
                    method,
                    success: function (response) {
                        console.log(response, "PantallasPorRoles/Create");
                        if (response.result === true) {
                            iziToast.success({
                                title: 'Exito',
                                message: response.message,
                                position: 'topRight',
                                transitionIn: 'flipInX',
                                transitionOut: 'flipOutX'
                            });
                        } else {
                            iziToast.error({
                                title: 'Error',
                                message: response.message,
                                position: 'topRight',
                                transitionIn: 'flipInX',
                                transitionOut: 'flipOutX'
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error(`Error al asignar las pantallas al rol`, errorThrown);
                    }
                });
            } else {
                alert("AAAAAAAAA");
            }
        } else {
            console.log(data, "data")
            var selectedNodes = data.selected;

            $.each(selectedNodes, function (index, nodeId) {
                $('#ParoTreeView').jstree('uncheck_node', nodeId);
            });
            if (selectedNodes.length === 0) {
                iziToast.warning({
                    title: 'Seleccione un rol',
                    message: "Por favor seleccione un rol",
                    position: 'topRight',
                    transitionIn: 'flipInX',
                    transitionOut: 'flipOutX'
                });
            }
        }
    })

    const ddlRoles = document.getElementById("Rol_Id");
    ddlRoles.addEventListener("change", () => {
        
    })
</script>